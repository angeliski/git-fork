// Code generated by mockery v2.7.4. DO NOT EDIT.

package repository

import (
	repository "github.com/angeliski/git-fork/domain/repository"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddRemote provides a mock function with given fields: _a0
func (_m *Service) AddRemote(_a0 repository.Model) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.Model) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: _a0
func (_m *Service) Fetch(_a0 repository.Model) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.Model) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasRemote provides a mock function with given fields: remoteName
func (_m *Service) HasRemote(remoteName string) bool {
	ret := _m.Called(remoteName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(remoteName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pull provides a mock function with given fields: _a0
func (_m *Service) Pull(_a0 repository.Model) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.Model) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: _a0
func (_m *Service) Push(_a0 repository.Model) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.Model) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
